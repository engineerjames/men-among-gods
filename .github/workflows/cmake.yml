name: CMake build / test (Linux, Release)

on:
  push:
    branches:
    - main
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install g++-multilib zlib1g-dev:i386 libssl-dev:i386 libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev clang-tidy-11 libjsoncpp-dev

    - name: Install vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{github.workspace}}/vcpkg
        cd ${{github.workspace}}/vcpkg
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install
        cd ${{github.workspace}}
        ./vcpkg/vcpkg install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

    - name: Test
      run: |
        cd ${{github.workspace}}/build
        ctest -C ${{env.BUILD_TYPE}} -V

